app.post("/register", async (req, res) => {
  console.log(req.body);
  // get name, email, password from the form
  const { name, email, password } = req.body;
  // if none of the fields are empty
    if (name && email && password) {
        const query = `SELECT * FROM users WHERE email = '${email}'`;
      
    });
    database = await database(query);
    console.log(database);
    // if the email is not already in the database
    if (database.length === 0) {
      // hash the password
      const hashedPassword = await bcrypt.hash(password, 10);
      // insert the new user into the database
      query = `INSERT INTO users (name, email, password) VALUES ('${name}', '${email}', '${hashedPassword}')`;
      database = await database;
      // redirect to the login page
      res.redirect("/login");
    } else {
      // if the email is already in the database
      res.redirect("/register");
    }
  } else {
    // if any of the fields are empty
    res.redirect("/register");
}
  

let errors = [];
    // check required fields
    if (!username || !email || !password || !password2) {
        errors.push({ msg: "Please fill in all fields" });
    }
    // check passwords match
    if (password !== password2) {
        errors.push({ msg: "Passwords do not match" });
    }
    // check pass length
    if (password.length < 6) {
        errors.push({ msg: "Password should be at least 6 characters" });
    }
    if (errors.length > 0) {
        res.render("register", {
            errors,
            username,
            email,
            password,
            password2,
        });
    } else {
        // validation passed
        User = {
            username: username,
            email: email,
            password: password,
        };
        // check if user exists
        database.query("SELECT * FROM users WHERE email = ?", [email], (err, results) => {
            if (err) {
                console.log(err);
            }
            if (results.length > 0) {
                errors.push({ msg: "Email is already registered" });
                res.render("register", {
                    errors,
                    username,
                    email,
                    password,
                    password2,
                });
            } else {
                // hash password
                bcrypt.hash(password, 10, (err, hash) => {
                    if (err) throw err;
                    // set password to hashed
                    password = hash;
                    // insert user
                    database.query("INSERT INTO users SET ?", { username: username, email: email, password: password }, (err, results) => {
                        if (err) {  
                            console.log(err);
                        } else {
                            console.log(results);
                            res.redirect("/login");
                        }
                    });
                });
            }
        });
    }